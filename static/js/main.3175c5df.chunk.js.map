{"version":3,"sources":["Store.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["socket","CTX","React","createContext","initState","General","from","msg","Topic2","reducer","state","action","payload","topic","type","sendChatAction","value","emit","Store","props","useReducer","allChats","dispatch","io","on","user","Math","random","toFixed","Provider","children","useStyles","makeStyles","theme","root","padding","spacing","margin","flex","display","alignItems","topicsWindow","width","height","borderRight","chatWindow","chatBox","button","textField","AppPaper","classes","useContext","console","log","topics","Object","keys","useState","activeTopic","changeActiveTopic","textValue","changeTextValue","Paper","elevation","className","Typography","variant","component","map","ListItem","onClick","e","target","innerText","key","ListItemText","primary","chat","i","Chip","label","chip","TextField","onChange","Button","color","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3175c5df.chunk.js","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\n\n\nexport const CTX = React.createContext();\n\n\nconst initState = {\n\tGeneral: [\n\t\t{from: 'chris', msg: 'hi'},\n\t\t{from: 'steve', msg: 'hi'},\n\t\t{from: 'john', msg: 'hi'}\n\t],\n\tTopic2: [\n\t\t{from: 'mike', msg: 'hi'},\n\t\t{from: 'cleetus', msg: 'hi'},\n\t\t{from: 'jesus', msg: 'hi'}\n\t]\n}\n\n\nfunction reducer(state, action) {\n\tconst {from, msg, topic} = action.payload;\n\tswitch(action.type) {\n\t\tcase 'RECEIVE_MESSAGE':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[topic]: [\n\t\t\t\t\t...state[topic],\n\t\t\t\t\t{ from, msg } \n\t\t\t\t]\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state\t\n\t}\n\n}\n\n\n\nlet socket;\n\nfunction sendChatAction(value) {\n\tsocket.emit('chat message', value);\n}\n\nexport default function Store(props) {\n\n\tconst [allChats, dispatch] = React.useReducer(reducer, initState);\n\n\tif(!socket) {\n\t\tsocket = io(':3001');\n\t    socket.on('chat message', function(msg){\n\t    \tdispatch({type: 'RECEIVE_MESSAGE', payload: msg});\n    \t});\n\t}\n\n\tconst user = 'Chris' + Math.random(100).toFixed(2);\n\n\n\n\treturn (\n\t\t<CTX.Provider value={{allChats, sendChatAction, user}}>\n\t\t\t{props.children}\n\t\t</CTX.Provider>\n\t)\n}\n\n\n\n\n","import React from 'react';\nimport { CTX } from './Store';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n  \tpadding: theme.spacing(3,2),\n  \tmargin: '50px',\n  },\n  flex: {\n  \tdisplay: 'flex',\n  \talignItems: 'center'\n  },\n  topicsWindow: {\n  \twidth: '30%',\n  \theight: '300px',\n  \tborderRight: '1px solid grey'\n  },\n  chatWindow: {\n\twidth: '70%',\n\theight: '300px',\n\tpadding: '20px'\n  },\n  chatBox: {\n\twidth: '80%'\n  },\n  button: {\n\twidth: '20%'\n  },\n  textField: {\n  \twidth: '100%'\n  }\n}));\n\n\nexport default function AppPaper() {\n\tconst classes = useStyles();\n\n  // CTX Store\n \tconst {allChats, sendChatAction, user} = React.useContext(CTX);\n\n \tconsole.log({allChats});\n\n\tconst topics = Object.keys(allChats);\n\n\t// Local State \n \tconst [activeTopic, changeActiveTopic] = React.useState(topics[0]);\n \tconst [textValue, changeTextValue] = React.useState('');\n\n\treturn (\n\t\t<div>\n\t\t\t<Paper elevation={3} className={classes.root}>\n\t\t\t\t<Typography variant=\"h2\" component=\"h2\">\n\t\t\t\t\tChat App\n\t\t\t\t</Typography>\t\t\t\n\t\t\t\t<Typography variant=\"p\">\n\t\t\t\t\tAn Interactive Chat app using React.js, Socket.io, and Express.  <br/>Styled with Material-UI.\n\t\t\t\t</Typography>\n\t\t\t\t<br/>\t\t\t\t\n\t\t\t\t<hr/>\t\t\t\t\n\t\t\t\t<Typography variant=\"h4\">\n\t\t\t\t\t{activeTopic}\n\t\t\t\t</Typography>\n\t\t\t\t<div className={classes.flex}>\n\t\t\t\t\t<div className={classes.topicsWindow}>\n\t\t\t\t\t\t<list>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttopics.map(topic => (\n\t\t\t\t\t\t        \t<ListItem onClick={e => changeActiveTopic(e.target.innerText)}key={topic} button>\n\t\t\t\t\t\t\t\t\t\t<ListItemText primary={topic} />          \t\n\t\t\t\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</list>\t\n\t\t\t\t\t</div>\t\t\t\t\n\t\t\t\t\t<div className={classes.chatWindow}>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tallChats[activeTopic].map((chat, i) => (\n\t\t\t\t\t        \t<div className={classes.flex} key={i}>\n\t\t\t\t\t        \t\t<Chip label={chat.from} className={classes.chip} />\n\t\t    \t\t\t\t\t\t\t<Typography variant=\"p\">\n\t\t\t\t\t\t\t\t\t\t\t{chat.msg}\n\t\t\t\t\t\t\t\t\t\t</Typography>\n\t\t\t\t\t        \t</div>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className={classes.flex}>\n\t\t\t\t\t<div className={classes.chatBox}>\n\t\t\t\t\t\t<TextField \n\t\t\t\t\t\t\tlabel=\"Type Your Message Here...\" \n\t\t\t\t\t\t\tclassName={classes.textField}\n\t\t\t\t\t\t\tonChange={e => changeTextValue(e.target.value)}\n\t\t\t\t\t\t\tvalue={textValue}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\t\t\t\t\n\t\t\t\t\t<div className={classes.button}>\n\n\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\tvariant=\"contained\" \n\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\tonClick={()=> {\n\t\t\t\t\t\t\t\tsendChatAction({from: user, msg: textValue, topic: activeTopic\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tchangeTextValue('');\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t  Submit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</Paper>\n\t\t</div>\n\t);\n}\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport Dashboard from './Dashboard';\nimport Store from './Store';\nimport './App.css'; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store>\n        <Dashboard />\n      </Store>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}